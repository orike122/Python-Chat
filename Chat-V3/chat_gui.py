#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.10
# In conjunction with Tcl version 8.6
#    Jan 25, 2018 05:01:55 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import chat_gui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Client (root)
    chat_gui_support.init(root, top)
    root.mainloop()

w = None
def create_Client(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Client (w)
    chat_gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Client():
    global w
    w.destroy()
    w = None


class Client:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("500x600+426+71")
        top.title("Client")



        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)



        self.conn_frame = Frame(top)
        self.conn_frame.place(relx=0.01, rely=0.02, relheight=0.17
                , relwidth=0.41)
        self.conn_frame.configure(relief=GROOVE)
        self.conn_frame.configure(borderwidth="2")
        self.conn_frame.configure(relief=GROOVE)
        self.conn_frame.configure(width=195)

        self.ip_lb = Label(self.conn_frame)
        self.ip_lb.place(relx=0.05, rely=0.1, height=19, width=23)
        self.ip_lb.configure(text='''IP:''')

        self.port_lb = Label(self.conn_frame)
        self.port_lb.place(relx=0.05, rely=0.33, height=19, width=39)
        self.port_lb.configure(text='''PORT:''')

        self.ip_tb = Entry(self.conn_frame)
        self.ip_tb.place(relx=0.25, rely=0.1,height=21, relwidth=0.54)
        self.ip_tb.configure(background="white")
        self.ip_tb.configure(font="TkFixedFont")
        self.ip_tb.configure(width=15)

        self.ip_tb1 = Entry(self.conn_frame)
        self.ip_tb1.place(relx=0.25, rely=0.32,height=21, relwidth=0.54)
        self.ip_tb1.configure(background="white")
        self.ip_tb1.configure(font="TkFixedFont")
        self.ip_tb1.configure(selectbackground="#c4c4c4")
        self.ip_tb1.configure(width=10)

        self.conn_btn = Button(self.conn_frame)
        self.conn_btn.place(relx=0.05, rely=0.62, height=27, width=87)
        self.conn_btn.configure(activebackground="#d9d9d9")
        self.conn_btn.configure(text='''Connect''')
        self.conn_btn.configure(width=87)

        self.dis_btn = Button(self.conn_frame)
        self.dis_btn.place(relx=0.49, rely=0.62, height=27, width=87)
        self.dis_btn.configure(activebackground="#d9d9d9")
        self.dis_btn.configure(state=DISABLED)
        self.dis_btn.configure(text='''Disconnect''')

        self.chat_frame = Frame(top)
        self.chat_frame.place(relx=0.01, rely=0.2, relheight=0.69, relwidth=0.97)

        self.chat_frame.configure(relief=GROOVE)
        self.chat_frame.configure(borderwidth="2")
        self.chat_frame.configure(relief=GROOVE)
        self.chat_frame.configure(width=485)

        self.chat = ScrolledText(self.chat_frame)
        self.chat.place(relx=0.02, rely=0.02, relheight=0.97, relwidth=0.97)
        self.chat.configure(background="white")
        self.chat.configure(font="TkTextFont")
        self.chat.configure(insertborderwidth="3")
        self.chat.configure(selectbackground="#c4c4c4")
        self.chat.configure(width=10)
        self.chat.configure(wrap=NONE)

        self.client_frame = Frame(top)
        self.client_frame.place(relx=0.44, rely=0.02, relheight=0.17
                , relwidth=0.55)
        self.client_frame.configure(relief=GROOVE)
        self.client_frame.configure(borderwidth="2")
        self.client_frame.configure(relief=GROOVE)
        self.client_frame.configure(width=265)

        self.clientlst = ScrolledListBox(self.client_frame)
        self.clientlst.place(relx=0.04, rely=0.1, relheight=0.82, relwidth=0.93)
        self.clientlst.configure(background="white")
        self.clientlst.configure(font="TkFixedFont")
        self.clientlst.configure(highlightcolor="#d9d9d9")
        self.clientlst.configure(selectbackground="#c4c4c4")
        self.clientlst.configure(width=10)

        self.Frame4 = Frame(top)
        self.Frame4.place(relx=0.02, rely=0.9, relheight=0.09, relwidth=0.97)
        self.Frame4.configure(relief=GROOVE)
        self.Frame4.configure(borderwidth="2")
        self.Frame4.configure(relief=GROOVE)
        self.Frame4.configure(width=485)

        self.msg_box = Text(self.Frame4)
        self.msg_box.place(relx=0.02, rely=0.18, relheight=0.47, relwidth=0.8)
        self.msg_box.configure(background="white")
        self.msg_box.configure(font="TkTextFont")
        self.msg_box.configure(selectbackground="#c4c4c4")
        self.msg_box.configure(width=386)
        self.msg_box.configure(wrap=WORD)

        self.send_btn = Button(self.Frame4)
        self.send_btn.place(relx=0.85, rely=0.18, height=27, width=67)
        self.send_btn.configure(activebackground="#d9d9d9")
        self.send_btn.configure(text='''Button''')





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



